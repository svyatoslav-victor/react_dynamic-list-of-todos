{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","todos","props","filterTodos","event","target","name","value","setState","filter","todo","title","toLocaleUpperCase","includes","completed","this","className","type","onClick","window","location","reload","placeholder","onChange","map","htmlFor","checked","readOnly","onSelectUser","userId","id","document","documentElement","scrollTop","React","Component","url","getUser","fetch","then","response","json","CurrentUser","user","prevProps","onClear","email","phone","App","selectedUserId","selectUser","clearUser","length","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8e6c9210.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../types/types';\n\ninterface Props {\n  todos: Todo[],\n  onSelectUser: (userId: number) => void,\n}\n\nexport class TodoList extends React.Component<Props, {}> {\n  state = {\n    todos: this.props.todos,\n  };\n\n  filterTodos = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'title') {\n      this.setState({\n        todos: this.props.todos\n          .filter(todo => todo.title.toLocaleUpperCase()\n            .includes(value.toLocaleUpperCase())),\n      });\n    }\n\n    if (name === 'status') {\n      this.setState({\n        todos: this.props.todos\n          .filter(todo => {\n            if (value === 'active') {\n              return !todo.completed;\n            }\n\n            if (value === 'completed') {\n              return todo.completed;\n            }\n\n            return todo.title;\n          }),\n      });\n    }\n  };\n\n  render() {\n    const { todos } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <button\n          type=\"button\"\n          className=\"TodoList__Refresh\"\n          onClick={() => window.location.reload()}\n        >\n          &#10227;\n        </button>\n\n        <h2>Todos:</h2>\n        <div className=\"TodoList__Filters\">\n          <input\n            type=\"text\"\n            className=\"TodoList__Filters--title\"\n            name=\"title\"\n            placeholder=\"Enter Title Here\"\n            onChange={this.filterTodos}\n          />\n          <select\n            className=\"TodoList__Filters--status\"\n            name=\"status\"\n            onChange={this.filterTodos}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => {\n              return (\n                !todo.completed ? (\n                  <li\n                    key={todo.id}\n                    className=\"TodoList__item TodoList__item--unchecked\"\n                  >\n                    <label htmlFor=\"active\">\n                      <input\n                        type=\"checkbox\"\n                        name=\"active\"\n                        readOnly\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className=\"\n                        TodoList__user-button\n                        TodoList__user-button--selected\n                        button\n                      \"\n                      type=\"button\"\n                      onClick={() => this.props.onSelectUser(todo.userId)}\n                    >\n                      {`User #${todo.userId}`}\n                    </button>\n                  </li>\n                ) : (\n                  <li\n                    key={todo.id}\n                    className=\"TodoList__item\n                      TodoList__item--checked\n                    \"\n                  >\n                    <label htmlFor=\"completed\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"completed\"\n                        checked\n                        readOnly\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className=\"TodoList__user-button button\"\n                      type=\"button\"\n                      onClick={() => this.props.onSelectUser(todo.userId)}\n                    >\n                      {`User #${todo.userId}`}\n                    </button>\n                  </li>\n                )\n              );\n            })}\n          </ul>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"TodoList__Return_To_Top\"\n          onClick={() => {\n            document.documentElement.scrollTop = 0;\n          }}\n        >\n          &#65514;\n        </button>\n      </div>\n    );\n  }\n}\n","import { Todo, User } from '../types/types';\n\nconst url = 'https://mate.academy/students-api';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(`${url}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${url}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\nimport { User } from '../../types/types';\n\ntype Props = {\n  userId: number,\n  onClear: () => void;\n};\n\nexport class CurrentUser extends React.Component<Props, {}> {\n  state = {\n    user: {} as User,\n  };\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then(user => {\n        this.setState({ user });\n      });\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>) {\n    if (prevProps.userId !== this.props.userId) {\n      getUser(this.props.userId)\n        .then(user => {\n          this.setState({ user });\n        });\n    }\n  }\n\n  render() {\n    const { userId, onClear } = this.props;\n    const { name, email, phone } = this.state.user;\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${userId}`}</span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{name}</h3>\n          <p className=\"CurrentUser__email\">{email}</p>\n          <p className=\"CurrentUser__phone\">{phone}</p>\n        </div>\n        <button\n          type=\"button\"\n          className=\"clearUser\"\n          onClick={onClear}\n        >\n          Clear\n        </button>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './types/types';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => {\n        this.setState({ todos });\n      });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0 && (\n            <TodoList\n              todos={todos}\n              onSelectUser={this.selectUser}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}